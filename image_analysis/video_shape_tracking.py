import cv2 as cv
import numpy as np

from pathlib import Path

#Tyler Boechler

import numpy as np
import cv2 as cv

def frame_count(video_path, manual=False):
    def manual_count(handler):
        frames = 0
        while True:
            status, frame = handler.read()
            if not status:
                break
            frames += 1
        return frames 

    cap = cv.VideoCapture(video_path)
    # Slow, inefficient but 100% accurate method 
    if manual:
        frames = manual_count(cap)
    # Fast, efficient but inaccurate method
    else:
        try:
            frames = int(cap.get(cv.CAP_PROP_FRAME_COUNT))
        except:
            frames = manual_count(cap)
    cap.release()
    return frames

class FileReader:
    def __init__(self):
        pass
    
    def read_picture_from_path(self, path: str) -> np.array:
        img = cv.imread(path)
        
        return img


    def read_video_frames_from_path(self, path: str) -> list:
        images = []

        cap = cv.VideoCapture(path)
        while not cap.isOpened():
            cap = cv.VideoCapture(path)
            cv.waitKey(10)

        post_frame = cap.get(cv.CAP_PROP_POS_FRAMES)
        while True:
            frame_ready, frame = cap.read() # get the frame

            if frame is None:
                break
            
            if frame_ready:
                # The frame is ready and already captured
                # cv2.imshow('video', frame)

                # store the current frame in as a numpy array
                np_frame = cv.imread('video', frame)
                images.append(np_frame)
                
                counter = 0
            else:
                # The next frame is not ready, so we try to read it again
                cap.set(post_frame, post_frame-1)
                # It is better to wait for a while for the next frame to be ready
                cv.waitKey(10)


        return images

    def read_n_video_frames_from_path(self, path: str, n: int) -> list:
        images = []

        cap = cv.VideoCapture(path)
        while not cap.isOpened():
            cap = cv.VideoCapture(path)
            cv.waitKey(10)

        post_frame = cap.get(cv.CAP_PROP_POS_FRAMES)
        counter = n
        while True:
            frame_ready, frame = cap.read() # get the frame

            if frame is None or counter == 0:
                break
            
            if frame_ready:
                # The frame is ready and already captured
                # cv2.imshow('video', frame)

                # store the current frame in as a numpy array
                np_frame = cv.imread('video', frame)
                images.append(np_frame)
                
                counter -= 1
            else:
                # The next frame is not ready, so we try to read it again
                cap.set(post_frame, post_frame-1)
                # It is better to wait for a while for the next frame to be ready
                cv.waitKey(10)


        return images
    
class VideoShapeTracking:
    def __init__(self):
        self.old_frame = None
        self.current_frame = None

        self.features0 = None
        self.features1 = None

        self.totalMovementX = 0
        self.totalMovementY = 0

        self.origin = None

        self.counter = 0
        self.number_of_points = 0

    def video_tracking_initialize_first_frame(self, original_frame: np.array, shape) -> bool:
        try:
            #Convert to gray 
            maxCorners = 50
            qualityLevel = 0.03
            minDistance = 7
            blockSize = 5

            self.old_frame = original_frame

            original_frame_gray = cv.cvtColor(original_frame, cv.COLOR_BGR2GRAY)
            

            main_mask = np.zeros_like(original_frame_gray, dtype=np.uint8)

            roi = np.array(shape, np.int32) #MAKE ROI MY SHAPE AND REPEAT FOR ALL OF MY SHAPES, or make sectioned shapes
            

            cv.fillPoly(main_mask, [roi], 255)


            # self.featuresGOOD = cv.goodFeaturesToTrackWithQuality(original_frame_gray, maxCorners, qualityLevel, minDistance, mask=main_mask, blockSize=blockSize)
            self.features0 = cv.goodFeaturesToTrack(original_frame_gray, maxCorners, qualityLevel, minDistance, mask=main_mask, blockSize=blockSize)
            self.number_of_points = len(self.features0)
            self.counter = 1
            # print(len(self.features0))
            # for features in self.features0:
            #     x, y = features.ravel().astype(int)  # Convert the coordinates to integers
            #     cv.circle(original_frame, (x, y), 5, (255, 0, 255), -1)  # Draw circles on the original frame
        except Exception as e:
            print("Issue detecting features - " + str(e))
            return False

    def feed_frame(self, frame: np.array, tracked_shapes):
        xmov = []
        ymov = []

        
        lk_of_paramters = dict(winSize=(90, 90), maxLevel=3, criteria=(cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03))
        if len(self.features0) > 1:
            self.features1, status, err = cv.calcOpticalFlowPyrLK(self.old_frame, frame, self.features0, None, **lk_of_paramters)
        else:
            print("FRAME FAILURE, NOT ENOUGH FEATURES FROM PREVIOUS FRAME")
            self.features1 = np.array([0,0])
            exit(1)

        if len(self.features1) > self.number_of_points-1 and len(self.features1) > 1:
            good_new_features = self.features1[status==1]
            good_old_features = self.features0[status==1]
        else:
            print("FAILURE IN TRACKING POINTS IN PREVIOUS FRAME")
            exit(1)

        for i, (new, old) in enumerate(zip(good_new_features, good_old_features)):
            a, b = new.ravel()
            c, d = old.ravel()
            xmov.append(c-a)
            ymov.append(d-b)

        #Use median of movement for total in that frame, I need to figure out my format for tracking and stuff first, back to shape selection UI.
        pass


if __name__ == "__main__":
    print("main")
    fileReader = FileReader()
    shape = [[257, 584], [257, 585], [257, 586], [257, 587], [257, 588], [258, 589], [260, 576], [260, 577], [260, 583], [260, 590], [261, 576], [261, 578], [261, 580], [261, 581], [261, 591], [262, 577], [262, 578], [262, 592], [263, 579], [263, 583], [263, 584], [263, 586], [263, 593], [264, 581], [264, 586], [264, 594], [265, 579], [265, 581], [265, 594], [266, 578], [266, 583], [266, 585], [267, 577], [267, 580], [267, 581], [267, 582], [267, 585], [267, 587], [267, 595], [267, 597], [267, 598], [268, 585], [268, 589], [268, 590], [268, 591], [268, 599], [269, 576], [269, 579], [269, 582], [269, 598], [269, 600], [270, 579], [270, 583], [270, 584], [270, 593], [270, 598], [270, 601], [271, 577], [271, 578], [271, 579], [271, 593], [271, 598], [271, 601], [271, 602], [272, 593], [272, 602], [273, 593], [274, 593], [274, 603], [275, 593], [275, 603], [276, 605], [277, 592], [277, 605], [278, 592], [279, 578], [279, 579], [279, 592], [279, 606], [280, 579], [280, 593], [280, 606], [281, 578], [281, 579], [281, 606], [282, 588], [282, 591], [282, 606], [283, 587], [283, 588], [283, 590], [283, 606], [284, 606], [285, 585], [285, 586], [285, 606], [286, 606], [287, 583], [288, 581], [288, 607], [289, 578], [289, 579], [289, 607], [290, 577], [290, 607], [292, 608], [293, 577], [293, 608], [294, 577], [295, 607], [296, 576], [297, 576], [297, 609], [298, 578], [298, 610], [299, 580], [299, 588], [300, 582], [300, 586], [300, 590], [300, 611], [301, 612], [302, 585], [302, 586], [302, 587], [302, 591], [302, 592], [302, 594], [302, 613], [303, 586], [303, 592], [303, 615], [304, 592], [304, 594], [304, 616], [305, 592], [306, 592], [306, 615], [307, 615], [308, 590], [308, 591], [309, 585], [309, 586], [309, 587], [309, 590], [309, 616], [310, 585], [310, 587], [310, 589], [310, 590], [310, 592], [310, 616], [311, 585], [311, 586], [311, 589], [311, 590], [311, 595], [311, 616], [313, 593], [313, 594], [313, 617], [314, 617], [315, 583], [315, 584], [315, 590], [315, 591], [315, 594], [316, 583], [316, 584], [316, 589], [316, 591], [316, 618], [317, 587], [317, 596], [318, 587], [318, 590], [318, 617], [319, 592], [319, 593], [319, 594], [319, 595], [319, 596], [320, 588], [320, 589], [320, 590], [320, 591], [320, 618], [321, 592], [321, 594], [321, 618], [322, 592], [322, 596], [322, 618], [323, 582], [323, 583], [323, 592], [323, 618], [324, 582], [324, 583], [324, 598], [324, 618], [325, 618], [326, 596], [326, 613], [326, 615], [327, 596], [327, 613], [327, 615], [327, 619], [327, 621], [327, 622], [328, 613], [328, 621], [328, 622], [329, 597], [329, 613], [329, 615], [330, 620], [331, 598], [333, 597], [333, 620], [334, 597], [334, 620], [335, 620], [336, 598], [337, 619], [338, 579], [338, 580], [338, 581], [338, 582], [338, 583], [338, 584], [338, 585], [338, 589], [338, 596], [338, 619], [339, 584], [339, 589], [339, 595], [340, 579], [340, 580], [340, 581], [340, 582], [340, 583], [340, 584], [340, 588], [340, 589], [340, 594], [340, 618], [340, 621], [340, 622], [341, 584], [341, 588], [341, 589], [341, 590], [341, 594], [341, 618], [341, 621], [342, 577], [342, 578], [342, 579], [342, 580], [342, 583], [342, 594], [342, 595], [342, 597], [342, 618], [343, 578], [343, 579], [343, 584], [343, 594], [343, 597], [343, 618], [344, 618], [345, 596], [346, 619], [347, 594], [347, 619], [347, 621], [348, 571], [348, 594], [348, 596], [348, 619], [348, 622], [349, 569], [349, 570], [349, 571], [349, 594], [349, 598], [349, 619], [350, 564], [350, 565], [350, 594], [350, 595], [350, 619], [351, 562], [351, 568], [351, 592], [351, 599], [351, 613], [351, 615], [352, 558], [352, 568], [352, 599], [352, 617], [352, 620], [353, 558], [353, 568], [353, 612], [353, 620], [354, 558], [354, 567], [354, 600], [354, 617], [354, 619], [355, 558], [355, 567], [355, 612], [355, 613], [355, 616], [355, 617], [355, 618], [356, 558], [356, 567], [356, 599], [357, 558], [357, 567], [357, 610], [358, 558], [358, 565], [358, 600], [358, 610], [359, 558], [359, 565], [359, 600], [359, 603], [360, 558], [360, 565], [360, 600], [360, 601], [361, 558], [361, 565], [361, 600], [361, 601], [361, 603], [361, 610], [362, 558], [362, 564], [362, 600], [362, 601], [362, 603], [362, 610], [363, 558], [363, 563], [363, 600], [363, 601], [363, 603], [363, 610], [364, 558], [364, 594], [364, 595], [364, 600], [364, 601], [364, 603], [364, 610], [365, 558], [365, 562], [365, 593], [365, 595], [365, 603], [366, 558], [366, 562], [366, 592], [366, 603], [366, 611], [367, 558], [367, 562], [367, 592], [367, 593], [367, 594], [367, 598], [367, 599], [368, 558], [368, 599], [368, 601], [368, 612], [369, 558], [369, 561], [369, 600], [369, 612], [370, 561], [370, 600], [370, 612], [371, 557], [371, 561], [371, 599], [371, 612], [372, 564], [372, 599], [372, 612], [373, 565], [373, 612], [374, 557], [374, 566], [374, 595], [374, 597], [374, 612], [375, 557], [375, 567], [375, 595], [375, 612], [376, 557], [376, 566], [376, 567], [376, 594], [376, 612], [377, 557], [377, 568], [377, 569], [377, 593], [377, 612], [378, 566], [378, 568], [378, 569], [378, 612], [379, 558], [379, 593], [379, 612], [380, 569], [380, 592], [380, 593], [380, 612], [381, 557], [381, 569], [381, 612], [382, 569], [382, 571], [382, 592], [382, 593], [382, 594], [382, 612], [383, 567], [383, 569], [383, 570], [383, 571], [383, 612], [384, 557], [384, 593], [384, 612], [385, 557], [385, 588], [385, 589], [385, 592], [385, 612], [386, 557], [386, 567], [386, 588], [386, 589], [386, 592], [387, 557], [387, 566], [387, 567], [387, 588], [387, 611], [388, 557], [388, 591], [388, 611], [389, 552], [389, 557], [389, 564], [389, 591], [389, 593], [389, 594], [389, 608], [390, 547], [390, 564], [390, 591], [390, 606], [390, 610], [391, 547], [391, 552], [391, 557], [391, 564], [391, 591], [391, 594], [391, 602], [391, 609], [391, 610], [392, 547], [392, 552], [392, 591], [392, 593], [392, 594], [392, 596], [392, 600], [392, 603], [392, 607], [392, 609], [393, 552], [393, 558], [393, 592], [393, 593], [393, 597], [393, 598], [393, 599], [393, 600], [393, 605], [393, 609], [394, 546], [394, 552], [394, 558], [394, 564], [394, 609], [395, 552], [395, 558], [395, 566], [395, 607], [395, 608], [396, 545], [396, 552], [396, 558], [396, 568], [396, 608], [397, 545], [397, 547], [397, 549], [397, 558], [397, 568], [397, 599], [397, 600], [398, 546], [398, 553], [398, 558], [398, 568], [398, 598], [398, 600], [399, 545], [399, 546], [399, 550], [399, 568], [400, 545], [400, 548], [400, 558], [400, 568], [400, 597], [400, 601], [401, 545], [401, 553], [401, 558], [401, 594], [401, 597], [401, 602], [402, 545], [402, 553], [402, 558], [402, 569], [402, 598], [402, 603], [403, 553], [403, 558], [403, 569], [403, 599], [404, 544], [404, 558], [404, 567], [404, 568], [404, 600], [404, 604], [405, 552], [405, 558], [405, 567], [406, 545], [406, 552], [406, 558], [406, 565], [406, 605], [406, 607], [407, 545], [407, 547], [407, 549], [407, 552], [407, 553], [407, 558], [407, 600], [407, 607], [408, 545], [408, 553], [408, 565], [408, 601], [408, 608], [409, 545], [409, 553], [409, 558], [409, 602], [409, 608], [410, 550], [410, 553], [410, 566], [410, 603], [410, 605], [410, 607], [410, 609], [410, 610], [411, 544], [411, 552], [411, 553], [411, 568], [411, 610], [411, 611], [411, 612], [412, 544], [412, 552], [412, 553], [412, 558], [412, 568], [412, 614], [413, 544], [413, 550], [413, 552], [413, 558], [413, 568], [413, 608], [413, 609], [413, 616], [413, 617], [413, 618], [413, 619], [414, 544], [414, 552], [414, 568], [414, 608], [414, 621], [415, 544], [415, 552], [415, 553], [415, 559], [415, 568], [416, 544], [416, 559], [416, 566], [416, 608], [416, 622], [417, 544], [417, 552], [417, 559], [417, 623], [418, 544], [418, 552], [418, 559], [418, 567], [418, 609], [418, 610], [418, 623], [419, 559], [419, 564], [419, 565], [419, 566], [419, 567], [420, 543], [420, 553], [420, 612], [420, 615], [420, 616], [420, 617], [420, 624], [421, 543], [421, 554], [421, 560], [421, 613], [421, 624], [422, 543], [422, 553], [422, 563], [422, 566], [422, 568], [422, 615], [423, 543], [423, 552], [423, 559], [423, 563], [423, 566], [423, 568], [424, 543], [424, 559], [424, 563], [424, 566], [424, 617], [424, 624], [425, 543], [425, 562], [425, 617], [425, 623], [426, 551], [426, 560], [426, 617], [426, 622], [427, 542], [427, 551], [427, 561], [427, 563], [427, 564], [427, 565], [427, 619], [428, 542], [428, 561], [428, 565], [428, 617], [428, 619], [428, 621], [429, 544], [429, 550], [429, 561], [429, 617], [429, 619], [430, 542], [430, 561], [430, 563], [430, 565], [430, 619], [431, 542], [431, 551], [431, 563], [431, 565], [431, 566], [431, 616], [432, 541], [432, 561], [432, 563], [432, 567], [432, 620], [432, 629], [433, 540], [433, 552], [433, 561], [433, 563], [433, 567], [433, 616], [433, 620], [433, 628], [433, 629], [434, 552], [434, 561], [434, 565], [434, 628], [434, 630], [435, 541], [435, 552], [435, 561], [435, 565], [435, 566], [435, 617], [435, 620], [435, 628], [435, 630], [436, 541], [436, 552], [436, 561], [436, 565], [436, 628], [437, 541], [437, 561], [437, 563], [437, 616], [437, 620], [437, 628], [437, 629], [438, 541], [438, 551], [438, 561], [438, 563], [438, 616], [438, 620], [438, 628], [438, 629], [439, 541], [439, 561], [439, 563], [439, 617], [439, 620], [439, 628], [439, 629], [439, 631], [440, 541], [440, 551], [440, 561], [440, 564], [440, 618], [440, 629], [440, 632], [441, 561], [441, 564], [441, 619], [441, 621], [441, 624], [441, 625], [441, 626], [441, 632], [442, 541], [442, 550], [442, 561], [442, 564], [442, 620], [442, 621], [442, 624], [442, 627], [442, 629], [442, 632], [443, 550], [443, 561], [443, 625], [443, 632], [444, 542], [444, 550], [444, 561], [444, 632], [445, 550], [445, 561], [445, 562], [445, 563], [445, 626], [445, 627], [445, 628], [445, 629], [445, 632], [446, 543], [446, 549], [446, 632], [446, 633], [447, 543], [448, 543], [448, 548], [448, 568], [448, 569], [448, 627], [448, 628], [449, 543], [449, 548], [449, 568], [449, 627], [450, 543], [450, 547], [450, 567], [450, 568], [450, 633], [450, 634], [451, 543], [451, 566], [451, 567], [451, 633], [451, 634], [452, 543], [452, 546], [452, 566], [452, 567], [452, 628], [452, 629], [452, 634], [453, 543], [453, 546], [453, 566], [453, 628], [453, 629], [454, 543], [454, 546], [454, 565], [454, 567], [455, 543], [455, 552], [455, 565], [456, 543], [456, 546], [456, 552], [456, 553], [456, 565], [456, 568], [457, 543], [457, 546], [457, 552], [457, 565], [457, 566], [457, 567], [457, 635], [458, 543], [458, 546], [458, 552], [458, 635], [458, 636], [459, 543], [459, 546], [459, 552], [459, 554], [459, 635], [459, 636], [460, 543], [460, 546], [460, 552], [460, 554], [460, 565], [460, 567], [460, 635], [460, 636], [461, 543], [461, 546], [461, 554], [461, 565], [461, 567], [461, 631], [461, 635], [461, 636], [462, 543], [462, 546], [462, 554], [462, 630], [462, 633], [462, 635], [462, 636], [463, 543], [463, 552], [463, 554], [463, 566], [463, 568], [463, 629], [464, 543], [464, 545], [464, 554], [464, 566], [464, 568], [464, 628], [464, 634], [464, 635], [464, 637], [465, 545], [465, 551], [465, 554], [465, 566], [465, 568], [465, 628], [465, 637], [466, 544], [466, 545], [466, 554], [466, 566], [466, 568], [466, 629], [466, 630], [466, 632], [466, 633], [466, 636], [466, 637], [467, 544], [467, 545], [467, 552], [467, 565], [467, 566], [467, 568], [467, 637], [468, 544], [468, 545], [468, 552], [468, 554], [468, 565], [468, 568], [468, 635], [468, 637], [469, 544], [469, 545], [469, 554], [469, 565], [469, 568], [469, 635], [470, 544], [470, 545], [470, 551], [470, 554], [470, 565], [470, 635], [470, 638], [471, 544], [471, 551], [471, 565], [471, 568], [471, 633], [471, 635], [471, 638], [472, 544], [472, 546], [472, 553], [472, 568], [472, 635], [472, 638], [473, 544], [473, 546], [473, 550], [473, 553], [473, 565], [473, 568], [473, 638], [474, 544], [474, 546], [474, 550], [474, 553], [474, 565], [474, 568], [474, 636], [474, 638], [475, 546], [475, 550], [475, 553], [475, 565], [475, 636], [475, 638], [476, 546], [476, 550], [476, 553], [476, 565], [476, 636], [476, 638], [477, 544], [477, 553], [477, 565], [477, 568], [477, 636], [477, 638], [478, 544], [478, 548], [478, 553], [478, 568], [478, 636], [478, 638], [479, 544], [479, 548], [479, 550], [479, 553], [479, 565], [479, 568], [479, 638], [480, 544], [480, 548], [480, 550], [480, 565], [480, 568], [480, 636], [480, 638], [481, 565], [481, 568], [481, 636], [481, 638], [482, 544], [482, 553], [482, 565], [482, 567], [482, 638], [483, 544], [483, 550], [483, 553], [483, 565], [483, 567], [483, 635], [483, 638], [484, 544], [484, 553], [484, 565], [484, 567], [484, 635], [485, 544], [485, 553], [485, 565], [485, 567], [485, 637], [486, 544], [486, 550], [486, 553], [486, 565], [486, 567], [486, 636], [486, 637], [487, 544], [487, 565], [487, 566], [487, 636], [487, 637], [488, 552], [488, 636], [488, 637], [489, 544], [489, 548], [489, 552], [489, 636], [489, 637], [489, 639], [490, 550], [490, 552], [490, 637], [490, 640], [491, 545], [491, 548], [491, 550], [491, 552], [491, 566], [491, 637], [491, 641], [492, 545], [492, 548], [492, 552], [492, 643], [493, 545], [493, 548], [493, 550], [493, 552], [493, 639], [493, 644], [494, 545], [494, 550], [494, 639], [494, 645], [495, 545], [495, 547], [495, 550], [495, 553], [495, 639], [495, 646], [496, 545], [496, 547], [496, 550], [496, 639], [496, 647], [497, 545], [497, 547], [497, 553], [497, 639], [497, 648], [498, 545], [498, 547], [498, 550], [498, 554], [498, 639], [498, 649], [499, 545], [499, 549], [499, 639], [499, 645], [499, 650], [500, 545], [500, 553], [500, 639], [501, 545], [501, 553], [501, 639], [501, 651], [502, 545], [502, 550], [502, 553], [502, 639], [502, 652], [503, 545], [503, 548], [503, 553], [503, 639], [503, 654], [504, 545], [504, 553], [504, 639], [505, 545], [505, 553], [505, 655], [506, 545], [506, 550], [506, 551], [506, 552], [506, 553], [506, 640], [507, 545], [507, 649], [507, 651], [507, 656], [508, 545], [508, 548], [508, 551], [508, 552], [508, 641], [508, 647], [509, 545], [509, 548], [509, 551], [509, 552], [509, 641], [509, 658], [510, 545], [510, 550], [510, 551], [510, 648], [510, 649], [510, 650], [510, 651], [511, 549], [511, 551], [511, 653], [511, 660], [511, 661], [511, 662], [511, 665], [512, 546], [512, 641], [512, 668], [513, 550], [513, 640], [513, 644], [513, 652], [513, 655], [513, 665], [513, 669], [514, 547], [514, 640], [514, 663], [514, 667], [514, 671], [514, 672], [514, 673], [515, 547], [515, 551], [515, 556], [515, 557], [515, 558], [515, 675], [515, 676], [515, 678], [515, 679], [515, 680], [516, 558], [516, 641], [516, 682], [517, 548], [517, 555], [517, 556], [517, 641], [517, 663], [517, 669], [517, 683], [518, 548], [518, 551], [518, 556], [518, 641], [518, 664], [518, 685], [519, 548], [519, 551], [519, 641], [519, 644], [519, 651], [519, 666], [519, 667], [519, 668], [519, 669], [519, 670], [519, 674], [519, 687], [520, 551], [520, 640], [520, 641], [520, 649], [520, 676], [520, 689], [520, 690], [521, 549], [521, 551], [521, 645], [521, 670], [521, 673], [521, 677], [521, 691], [522, 549], [522, 551], [522, 645], [522, 677], [522, 692], [523, 549], [523, 551], [523, 645], [523, 675], [523, 679], [523, 680], [523, 681], [523, 684], [523, 685], [523, 694], [524, 549], [524, 551], [524, 645], [524, 687], [524, 696], [525, 549], [525, 645], [525, 678], [525, 688], [525, 689], [525, 690], [525, 698], [525, 699], [526, 549], [526, 553], [526, 645], [526, 700], [526, 701], [526, 702], [527, 645], [527, 692], [527, 698], [527, 699], [527, 700], [527, 702], [527, 703], [527, 704], [527, 705], [527, 706], [528, 550], [528, 554], [528, 645], [528, 678], [528, 694], [528, 696], [528, 708], [529, 550], [529, 645], [529, 679], [529, 688], [529, 689], [529, 690], [529, 695], [529, 708], [530, 550], [530, 553], [530, 645], [530, 662], [530, 680], [530, 688], [530, 689], [530, 702], [531, 550], [531, 553], [531, 645], [531, 655], [531, 658], [531, 659], [531, 663], [531, 682], [531, 688], [531, 701], [531, 703], [531, 710], [532, 550], [532, 645], [532, 665], [532, 684], [532, 689], [532, 708], [532, 712], [533, 550], [533, 554], [533, 645], [533, 656], [533, 666], [533, 684], [533, 704], [533, 705], [533, 714], [534, 550], [534, 554], [534, 645], [534, 647], [534, 656], [534, 667], [534, 709], [534, 715], [535, 554], [535, 650], [535, 655], [535, 686], [535, 709], [535, 716], [536, 549], [536, 645], [536, 652], [536, 653], [536, 654], [536, 668], [536, 688], [536, 690], [536, 691], [536, 709], [537, 549], [537, 550], [537, 552], [537, 555], [537, 644], [537, 645], [537, 668], [537, 693], [537, 711], [537, 717], [538, 548], [538, 549], [538, 555], [538, 644], [538, 645], [538, 668], [538, 693], [538, 713], [538, 718], [539, 548], [539, 549], [539, 553], [539, 555], [539, 645], [539, 652], [539, 668], [539, 693], [539, 719], [540, 553], [540, 555], [540, 668], [540, 693], [540, 714], [540, 720], [541, 553], [541, 555], [541, 646], [541, 668], [541, 691], [541, 722], [542, 548], [542, 553], [542, 555], [542, 644], [542, 645], [542, 646], [542, 647], [542, 652], [542, 687], [542, 715], [542, 723], [543, 547], [543, 548], [543, 553], [543, 554], [543, 647], [543, 669], [543, 717], [543, 723], [543, 724], [543, 725], [544, 543], [544, 547], [544, 643], [544, 647], [544, 669], [544, 690], [544, 719], [544, 720], [544, 721], [544, 725], [545, 543], [545, 544], [545, 546], [545, 547], [545, 642], [546, 543], [546, 544], [546, 546], [546, 547], [546, 548], [546, 643], [546, 644], [546, 645], [546, 646], [546, 668], [546, 692], [547, 543], [547, 544], [547, 549], [547, 681], [547, 682], [547, 683], [547, 684], [547, 693], [548, 542], [548, 543], [548, 547], [548, 549], [548, 669], [548, 679], [548, 686], [548, 687], [548, 688], [548, 690], [549, 541], [549, 543], [549, 548], [549, 549], [549, 690], [549, 694], [549, 728], [549, 729], [550, 540], [550, 543], [550, 668], [550, 680], [550, 681], [550, 682], [550, 690], [550, 729], [551, 539], [551, 542], [551, 684], [551, 696], [551, 730], [552, 537], [552, 538], [552, 539], [552, 540], [552, 541], [552, 668], [552, 684], [552, 691], [552, 696], [552, 728], [552, 729], [552, 730], [553, 534], [553, 535], [553, 669], [553, 684], [553, 697], [554, 533], [554, 537], [554, 538], [554, 670], [554, 684], [554, 692], [554, 699], [554, 702], [554, 703], [554, 727], [554, 729], [555, 529], [555, 530], [555, 531], [555, 535], [555, 682], [555, 684], [555, 685], [555, 693], [555, 703], [555, 729], [556, 527], [556, 532], [556, 533], [556, 534], [556, 671], [556, 694], [556, 726], [556, 729], [557, 525], [557, 671], [557, 686], [557, 695], [557, 704], [558, 523], [558, 530], [558, 671], [558, 696], [558, 703], [558, 727], [558, 728], [559, 521], [559, 530], [559, 543], [559, 672], [559, 687], [559, 697], [559, 727], [560, 517], [560, 518], [560, 519], [560, 530], [560, 542], [560, 543], [560, 673], [560, 688], [560, 698], [560, 699], [560, 700], [560, 701], [560, 702], [560, 726], [560, 727], [561, 515], [561, 528], [561, 542], [561, 674], [561, 725], [561, 726], [562, 515], [562, 527], [562, 539], [562, 540], [562, 541], [562, 675], [562, 689], [562, 713], [562, 725], [562, 726], [563, 538], [563, 690], [563, 712], [563, 713], [563, 715], [563, 725], [564, 512], [564, 513], [564, 526], [564, 538], [564, 540], [564, 677], [564, 685], [564, 686], [564, 713], [564, 720], [564, 724], [564, 725], [565, 512], [565, 538], [565, 540], [565, 677], [565, 688], [565, 691], [565, 714], [565, 717], [565, 718], [565, 721], [565, 724], [566, 524], [566, 540], [566, 677], [566, 684], [566, 692], [566, 721], [567, 513], [567, 538], [567, 540], [567, 677], [567, 684], [567, 690], [567, 692], [567, 714], [567, 723], [568, 514], [568, 522], [568, 535], [568, 539], [568, 677], [568, 723], [569, 515], [569, 516], [569, 520], [569, 535], [569, 538], [569, 677], [569, 686], [569, 691], [569, 693], [569, 713], [569, 722], [570, 518], [570, 520], [570, 535], [570, 536], [570, 679], [570, 687], [570, 694], [570, 713], [570, 721], [571, 519], [571, 520], [571, 688], [571, 692], [571, 694], [571, 713], [571, 720], [572, 520], [572, 521], [572, 522], [572, 681], [572, 688], [572, 719], [573, 522], [573, 551], [573, 681], [573, 688], [573, 693], [573, 695], [573, 715], [574, 521], [574, 522], [574, 550], [574, 551], [574, 681], [574, 695], [574, 715], [574, 718], [575, 522], [575, 550], [575, 551], [575, 688], [575, 693], [575, 695], [575, 715], [575, 718], [576, 522], [576, 524], [576, 525], [576, 551], [576, 682], [576, 690], [576, 691], [576, 718], [577, 522], [577, 526], [577, 549], [577, 551], [577, 696], [577, 715], [577, 718], [578, 522], [578, 549], [578, 682], [578, 692], [578, 697], [578, 714], [578, 718], [579, 522], [579, 525], [579, 549], [579, 550], [579, 683], [579, 718], [580, 522], [580, 524], [580, 549], [580, 685], [580, 698], [580, 714], [580, 718], [581, 522], [581, 714], [581, 718], [582, 559], [582, 560], [582, 685], [582, 686], [582, 699], [582, 714], [582, 718], [583, 559], [583, 560], [583, 700], [583, 714], [583, 718], [584, 559], [584, 560], [584, 687], [584, 701], [584, 714], [584, 718], [585, 559], [585, 702], [585, 714], [586, 687], [586, 688], [586, 703], [586, 714], [586, 719], [587, 559], [587, 704], [587, 709], [587, 714], [587, 719], [588, 546], [588, 547], [588, 558], [588, 559], [588, 688], [588, 692], [588, 693], [588, 710], [588, 714], [588, 719], [589, 546], [589, 547], [589, 558], [589, 559], [589, 695], [589, 697], [589, 698], [589, 703], [589, 706], [589, 707], [589, 708], [589, 712], [589, 713], [589, 719], [590, 558], [590, 559], [590, 689], [590, 690], [590, 691], [590, 705], [590, 719], [591, 559], [591, 692], [591, 693], [591, 699], [591, 719], [592, 557], [592, 559], [592, 691], [592, 692], [592, 693], [592, 694], [592, 699], [592, 719], [593, 557], [593, 559], [593, 719], [594, 557], [594, 559], [594, 698], [594, 699], [594, 707], [594, 719], [595, 557], [595, 697], [595, 705], [595, 707], [595, 709], [595, 719], [595, 720], [596, 557], [596, 558], [596, 698], [596, 699], [596, 707], [596, 719], [596, 720], [597, 700], [597, 704], [597, 708], [597, 719], [598, 701], [598, 704], [598, 719], [599, 708], [599, 719], [600, 702], [600, 705], [600, 719], [601, 702], [601, 706], [601, 718], [602, 702], [602, 706], [602, 713], [602, 717], [603, 706], [603, 715], [603, 716], [604, 701], [604, 706], [604, 716], [605, 700], [605, 708], [605, 709], [605, 712], [606, 700], [606, 711], [607, 707], [607, 708], [607, 710], [607, 711], [608, 701], [608, 705], [608, 707], [608, 709], [609, 701], [609, 707], [609, 709], [609, 711], [609, 712], [610, 701], [610, 711], [611, 700], [611, 709], [611, 710], [612, 709], [613, 700], [613, 708], [614, 700], [614, 705], [614, 706], [614, 707], [615, 703], [616, 699], [616, 702], [617, 699], [618, 699], [618, 701], [619, 699], [619, 700], [620, 700], [623, 697], [623, 698], [624, 694], [624, 695], [624, 696], [624, 697], [625, 691], [625, 692], [625, 694], [626, 691], [626, 694], [627, 673], [627, 674], [627, 682], [627, 683], [627, 691], [627, 692], [628, 516], [628, 517], [628, 518], [628, 520], [628, 521], [628, 522], [628, 524], [628, 673], [628, 682], [628, 688], [628, 689], [628, 690], [628, 691], [629, 517], [629, 518], [629, 531], [629, 532], [629, 673], [629, 674], [629, 675], [629, 682], [629, 685], [629, 686], [629, 687], [629, 688], [630, 519], [630, 520], [630, 521], [630, 525], [630, 530], [630, 532], [630, 687], [631, 523], [631, 524], [631, 525], [631, 530], [631, 531], [631, 532], [631, 682], [631, 685], [632, 682], [632, 684], [633, 682], [633, 683], [634, 677], [634, 678], [634, 679], [634, 682], [635, 676], [635, 680], [635, 682], [636, 676], [636, 682], [637, 677], [637, 683], [638, 683], [639, 679], [639, 683], [640, 679], [641, 679], [641, 684], [642, 547], [642, 548], [642, 679], [642, 684], [643, 547], [643, 548], [643, 679], [643, 684], [644, 548], [644, 679], [644, 685], [645, 546], [645, 548], [645, 683], [645, 685], [645, 686], [646, 548], [646, 681], [646, 683], [646, 687], [647, 545], [647, 683], [647, 687], [648, 545], [648, 547], [648, 683], [649, 518], [649, 519], [649, 545], [649, 546], [649, 683], [649, 688], [650, 518], [650, 519], [650, 546], [650, 683], [650, 689], [651, 512], [651, 513], [651, 683], [651, 689], [652, 511], [652, 514], [652, 683], [652, 689], [653, 511], [653, 516], [653, 683], [653, 689], [654, 516], [654, 689], [655, 512], [655, 685], [655, 689], [656, 513], [656, 514], [656, 689], [657, 687], [657, 689], [658, 688], [660, 542], [661, 541], [661, 542], [661, 543], [661, 687], [661, 688], [662, 688], [663, 540], [663, 543], [663, 686], [663, 688], [664, 543], [664, 685], [664, 688], [665, 541], [665, 543], [665, 684], [665, 685], [665, 687], [666, 687], [667, 683], [668, 686], [669, 537], [669, 538], [669, 682], [669, 683], [669, 686], [670, 537], [670, 538], [670, 670], [670, 671], [670, 672], [670, 681], [670, 683], [670, 686], [671, 537], [671, 538], [671, 669], [671, 673], [671, 683], [671, 685], [672, 537], [672, 538], [672, 667], [672, 675], [672, 684], [672, 685], [673, 537], [673, 538], [673, 676], [673, 684], [674, 537], [674, 538], [674, 667], [674, 677], [674, 684], [675, 535], [675, 536], [675, 537], [675, 668], [675, 678], [675, 682], [675, 683], [675, 684], [676, 535], [676, 536], [676, 668], [676, 682], [676, 683], [677, 668], [677, 670], [677, 671], [677, 672], [677, 679], [677, 681], [677, 682], [678, 668], [678, 681], [679, 667], [679, 668], [679, 669], [679, 681], [680, 673], [680, 680], [681, 670], [681, 672], [681, 679], [682, 666], [683, 666], [683, 667], [683, 678], [684, 677], [685, 675], [686, 668], [686, 675], [688, 666], [688, 676], [689, 666], [689, 676], [690, 666], [690, 676], [691, 666], [691, 676], [692, 666], [692, 676], [693, 666], [693, 676], [694, 675], [695, 667], [695, 675], [696, 667], [696, 675], [697, 669], [697, 672], [698, 674], [699, 674], [700, 672], [700, 674], [701, 674], [702, 673], [702, 674], [703, 673], [703, 674], [704, 673], [704, 674], [705, 673]]
    shape_transposed = [[y, x] for x, y in shape]
    shape_transposed = np.array(shape_transposed, np.uint32)
    frame = fileReader.read_picture_from_path("python_projects/DivingVisualTracker/image_analysis/pic3/20240130_172048 - Copy.jpg")

    shapeTracker = VideoShapeTracking()
    cv.waitKey(0)
    # print(shape_transposed)
    shapeTracker.video_tracking_initialize_first_frame(frame, shape_transposed)